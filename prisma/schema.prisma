// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode = "prisma"
}

model TodoList {
  id        BigInt      @id @default(autoincrement())
  title     String      @db.String(250)
  color     String      @db.String(250)
  itens     TodoItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model TodoItem {
  id            BigInt          @id @default(autoincrement())
  title         String          @unique() @db.String(250)
  todoList      TodoList        @relation(fields: [todoListId], references: [id])
  todoListId    BigInt
  notes         String?         @db.String
  isComplete    Boolean         @default(false)
  reminder      DateTime?
  dueDate       DateTime?
  priorityLevel PriorityLevel?
  completedAt   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum PriorityLevel {
  High
  Medium
  Low 
}

model Example {
  id        String   @id @default(cuid())
  name      String   @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                        String  @id @default(cuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String? @db.String
  refresh_token_expires_in  Int?  
  access_token              String? @db.String
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.String
  session_state             String?
  user                      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
